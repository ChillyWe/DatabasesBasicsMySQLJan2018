CREATE DATABASE table_relation;
USE table_relation;

#!
CREATE TABLE passports (
    passport_id INT(11) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    passport_number VARCHAR(20) NOT NULL UNIQUE
);

CREATE TABLE persons (
    person_id INT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(30),
    salary DECIMAL(10, 2 ) NOT NULL,
    passport_id INT(11) UNSIGNED UNIQUE
);

ALTER TABLE persons ADD CONSTRAINT fk_persons_passports
FOREIGN KEY (passport_id)
REFERENCES passports(passport_id);

INSERT INTO passports(passport_id, passport_number)
VALUE (101, 'N34FG21B'),
	(102, 'K65LO4R7'),
	(103, 'ZE657QP2');

INSERT INTO persons (person_id, first_name, salary, passport_id)
VALUES (1, 'Roberto', 43300, 102),
	(2, 'Tom', 56100, 103),
	(3, 'Yana', 60200, 101);

#2
CREATE TABLE manufacturers (
	manufacturer_id INT(11) UNSIGNED not NULL AUTO_INCREMENT primary key,
    `name` VARCHAR(50),
    established_on DATETIME
);

INSERT INTO manufacturers 
VALUES (1, 'BMW', '1916-03-01'), 
	(2, 'Tesla', '2003-01-01'), 
	(3, 'Lada', '1966-05-01');

CREATE TABLE models (
    model_id INT(11) UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
    `name` VARCHAR(50),
    manufacturer_id INT(11) UNSIGNED
);

ALTER TABLE models Add CONSTRAINT fk_models_manufacturers
FOREIGN KEY (manufacturer_id) 
REFERENCES manufacturers(manufacturer_id);

INSERT INTO models
VALUES (101, 'X1', 1), 
	(102, 'i6', 1), 
	(103, 'Model S', 2), 
	(104, 'Model X', 2), 
	(105, 'Model 3', 2), 
	(106, 'Nova', 3);
    
#3

    
#4
CREATE TABLE teachers (
    teacher_id INT NOT NULL,
    name VARCHAR(50) NOT NULL,
    manager_id INT,
    CONSTRAINT pk_teacher_id PRIMARY KEY (teacher_id),
    CONSTRAINT fk_teachers_teachers FOREIGN KEY (manager_id)
        REFERENCES teachers (teacher_id)
);

INSERT INTO teachers VALUE
(101, 'John', NULL), (105, 'Mark', 101), (106, 'Greta', 101), 
(102, 'Maya', 106), (103, 'Silvia', 106), (104, 'Ted', 105);
    
#5
CREATE TABLE cities (
    city_id INT(11),
    name VARCHAR(50),
    CONSTRAINT pk_city_id PRIMARY KEY (city_id)
);

CREATE TABLE customers (
    customer_id INT(11),
    name VARCHAR(50),
    birthday DATE,
    city_id INT(11),
    CONSTRAINT pk_customer_id PRIMARY KEY (customer_id),
    CONSTRAINT fk_customer_city FOREIGN KEY (city_id)
        REFERENCES cities (city_id)
);

CREATE TABLE orders (
    order_id INT(11),
    customer_id INT(11),
    CONSTRAINT pk_order_id PRIMARY KEY (order_id),
	CONSTRAINT fk_order_customers FOREIGN KEY (customer_id)
        REFERENCES customers (customer_id)
);

CREATE TABLE item_types (
    item_type_id INT(11),
    name VARCHAR(50),
    CONSTRAINT pk_item_types PRIMARY KEY (item_type_id)
);

CREATE TABLE items (
    item_id INT(11),
    name VARCHAR(50),
    item_type_id INT(11),
    CONSTRAINT pk_item_id PRIMARY KEY (item_id),
    CONSTRAINT fk_item_type_id FOREIGN KEY (item_type_id)
        REFERENCES item_types (item_type_id)
);

CREATE TABLE order_items (
    order_id INT(11),
    item_id INT(11),
    CONSTRAINT pk_order_items PRIMARY KEY (order_id , item_id),
    CONSTRAINT fk_order_item_orders FOREIGN KEY (order_id)
        REFERENCES orders (order_id),
    CONSTRAINT fk_order_item_items FOREIGN KEY (item_id)
        REFERENCES items (item_id)
);

#6
CREATE TABLE majors (
    major_id INT(11),
    name VARCHAR(50),
    CONSTRAINT pk_major_id PRIMARY KEY (major_id)
);

CREATE TABLE students (
    student_id INT(11),
    student_number VARCHAR(12),
    student_name VARCHAR(50),
    major_id INT(11),
    CONSTRAINT pk_student_id PRIMARY KEY (student_id),
    CONSTRAINT fk_student_majors FOREIGN KEY (major_id)
        REFERENCES majors (major_id)
);

CREATE TABLE payments (
    payment_id INT(11),
    payment_date DATE,
    payment_amount DECIMAL(8 , 2 ),
    student_id INT(11),
    CONSTRAINT pk_payment_id PRIMARY KEY (payment_id),
    CONSTRAINT fk_payment_students FOREIGN KEY (student_id)
        REFERENCES students (student_id)
);

CREATE TABLE subjects (
    subject_id INT(11),
    subject_name VARCHAR(50),
    CONSTRAINT pk_subject_id PRIMARY KEY (subject_id)
);

CREATE TABLE agenda (
    student_id INT(11),
    subject_id INT(11),
    CONSTRAINT pk_student_subjects PRIMARY KEY (student_id , subject_id),
    CONSTRAINT fk_student_subjects_student FOREIGN KEY (student_id)
        REFERENCES students (student_id),
    CONSTRAINT fk_student_subjects_subjects FOREIGN KEY (subject_id)
        REFERENCES subjects (subject_id)
);

#9
SELECT 
    m.mountain_range,
    p.peak_name,
    p.elevation AS 'peak_elevation'
FROM
    peaks AS p
        JOIN
    mountains AS m ON p.mountain_id = m.id
WHERE
    m.mountain_range = 'Rila'
ORDER BY p.elevation DESC;
