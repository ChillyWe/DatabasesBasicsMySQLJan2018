#1
USE `gringotts`;

SELECT 
    COUNT(*) AS `count`
FROM
    `wizzard_deposits`;
    
#2
SELECT 
    max(`magic_wand_size`) AS `longest_magic_wand`
FROM
    `wizzard_deposits`;

#3
SELECT 
    w.deposit_group,
    MAX(w.magic_wand_size) AS `longest_magic_wand`
FROM
    `wizzard_deposits` AS w
GROUP BY `deposit_group`;

#4
SELECT 
    *
FROM
    `wizzard_deposits` AS w;

#5
SELECT 
    wd.deposit_group, SUM(wd.deposit_amount) AS 'total_sum'
FROM
    wizzard_deposits AS wd
GROUP BY deposit_group
ORDER BY total_sum ASC;

#6
SELECT 
    wd.deposit_group, SUM(wd.deposit_amount) AS 'total_sum'
FROM
    wizzard_deposits AS wd
WHERE
    wd.magic_wand_creator LIKE 'Ollivander family'
GROUP BY wd.deposit_group
ORDER BY wd.deposit_group ASC;

#7
SELECT 
    wd.deposit_group, SUM(wd.deposit_amount) AS 'total_sum'
FROM
    wizzard_deposits AS wd
WHERE
    wd.magic_wand_creator LIKE 'Ollivander family'
GROUP BY wd.deposit_group
HAVING total_sum < 150000
ORDER BY total_sum DESC;

#8
SELECT 
    wd.deposit_group, 
    wd.magic_wand_creator, 
    MIN(deposit_charge)
FROM
    wizzard_deposits AS wd
GROUP BY wd.deposit_group , wd.magic_wand_creator
ORDER BY wd.magic_wand_creator, wd.deposit_group;

#9
SELECT 
    CASE
        WHEN wd.age <= 10 THEN '[0-10]'
        WHEN wd.age <= 20 THEN '[11-20]'
        WHEN wd.age <= 30 THEN '[21-30]'
        WHEN wd.age <= 40 THEN '[31-40]'
        WHEN wd.age <= 50 THEN '[41-50]'
        WHEN wd.age <= 60 THEN '[51-60]'
        ELSE '[61+]'
    END AS 'age_group',
    COUNT(*) AS 'wizzard_count'
FROM
    wizzard_deposits AS wd
GROUP BY age_group;

#10
SELECT 
    SUBSTRING(wd.first_name, 1, 1) AS 'first_letter'
FROM
    wizzard_deposits AS wd
WHERE
    deposit_group = 'Troll Chest'
GROUP BY first_letter
ORDER BY first_letter;

#11
SELECT 
    wd.deposit_group,
    wd.is_deposit_expired,
    AVG(wd.deposit_interest) AS 'average_interest'
FROM
    wizzard_deposits AS wd
WHERE
    wd.deposit_start_date > '1985-01-01'
GROUP BY wd.deposit_group , is_deposit_expired
ORDER BY wd.deposit_group DESC, wd.is_deposit_expired ASC;

#12



#13
USE soft_uni;

SELECT 
    e.department_id, MIN(e.salary) AS 'minimum_salary'
FROM
    employees AS e
WHERE
    DATE_FORMAT(e.hire_date, '%d/%m/%Y') > '01/01/2000'
GROUP BY e.department_id
HAVING e.department_id = 2
    OR e.department_id = 5
    OR e.department_id = 7
ORDER BY e.department_id ASC;

#14
CREATE TABLE NewTable SELECT * FROM
    Employees
WHERE
    salary > 30000;

DELETE FROM NewTable 
WHERE
    manager_id = 42;

UPDATE NewTable 
SET 
    Salary = Salary + 5000
WHERE
    department_id = 1;

SELECT 
    department_id, AVG(salary) AS avg_salary
FROM
    NewTable
GROUP BY department_id
ORDER BY department_id;

#15
SELECT 
    e.department_id, MAX(e.salary) AS 'max_salary'
FROM
    employees AS e
GROUP BY department_id
HAVING NOT max_salary BETWEEN 30000 AND 70000
ORDER BY department_id ASC;

#16
SELECT 
    COUNT(e.salary)
FROM
    employees AS e
GROUP BY e.manager_id
HAVING manager_id IS NULL;







#19
SELECT 
    e.department_id, SUM(e.salary)
FROM
    employees AS e
GROUP BY e.department_id
ORDER BY e.department_id ASC;

